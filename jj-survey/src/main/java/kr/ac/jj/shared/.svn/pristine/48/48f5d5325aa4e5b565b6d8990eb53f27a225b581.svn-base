package kr.ac.jj.shared.infrastructure.framework.core.support.codedata;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BaseException;
import kr.ac.jj.shared.infrastructure.framework.core.support.collection.BaseMapList;

public class CodeDataSourceAccessor {

    private List<CodeDataSource> codeDataSourceList;
    private Map<String, BaseMapList> booleanTypeCodeDataSource;

    public CodeDataSourceAccessor(CodeDataSource... codeDataSources) {
        this.codeDataSourceList = new ArrayList<CodeDataSource>();

        if (codeDataSources == null) {
            return;
        }

        for (int i = 0; i < codeDataSources.length; i++) {
            this.codeDataSourceList.add(codeDataSources[i]);
            codeDataSources[i].refresh();
        }
    }

    public void addCodeDataSource(CodeDataSource... codeDataSources) {
        if (codeDataSources == null) {
            return;
        }

        if (this.codeDataSourceList == null) {
            this.codeDataSourceList = new ArrayList<CodeDataSource>();
        }

        for (int i = 0; i < codeDataSources.length; i++) {
            this.codeDataSourceList.add(codeDataSources[i]);
            codeDataSources[i].refresh();
        }
    }

    public BaseMapList getList(String path, Locale locale) {
        return this.getList(path, locale, false);
    }

    public BaseMapList getList(String path, Locale locale, boolean convertToBoolean) {
        if (StringUtils.isEmpty(path)) {
            throw new BaseException("CodeData path is not defined!");
        }

        for (int i = 0, ii = this.codeDataSourceList.size(); i < ii; i++) {
            CodeDataSource codeDataSource = this.codeDataSourceList.get(i);

            if (!codeDataSource.isMatched(path)) {
                continue;
            }

            if (!convertToBoolean || !codeDataSource.isBooleanTypeAvailable()) {
                BaseMapList orgCodeDataList = codeDataSource.getList(path, locale);

                if (orgCodeDataList != null) {
                    return orgCodeDataList;
                }
            } else {
                if (this.booleanTypeCodeDataSource == null) {
                    this.booleanTypeCodeDataSource = new HashMap<String, BaseMapList>();
                }

                String key = path + "::" + locale;

                BaseMapList booleanCodeDataList = this.booleanTypeCodeDataSource.get(key);

                if (booleanCodeDataList != null) {
                    return booleanCodeDataList;
                }

                BaseMapList orgCodeDataList = codeDataSource.getList(path, locale);

                if (orgCodeDataList != null) {
                    BaseMapList codeDataList;

                    if (CodeDataSourceUtil.isBooleanType(orgCodeDataList)) {
                        codeDataList = CodeDataSourceUtil.convertToBoolean(orgCodeDataList);
                    } else {
                        codeDataList = orgCodeDataList;
                    }

                    this.booleanTypeCodeDataSource.put(key, codeDataList);

                    return codeDataList;
                }
            }
        }

        throw new BaseException("CodeData \"" + path + "\" is not available.");
    }

    public void refreshAll() {
        if (this.booleanTypeCodeDataSource != null) {
            this.booleanTypeCodeDataSource.clear();
        }

        for (CodeDataSource codeDataSource : this.codeDataSourceList) {
            codeDataSource.refresh();
        }
    }

}
