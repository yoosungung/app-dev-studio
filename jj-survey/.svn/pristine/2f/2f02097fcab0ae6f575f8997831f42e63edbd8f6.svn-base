/*Copyright (C) 2014  JD Software, Inc.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package com.jd.survey.service.email;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.stereotype.Service;

@Service("MailService")
public class MailService {

    // ~ Static fields/initializers
    // =========================================================

    // ~ Instance fields
    // ====================================================================

    @Autowired
    private JavaMailSender mailSender;

    // ~ Methods
    // ============================================================================

    public void sendEmail(final String toEmailAddress, final String ccEmailAdress, final String emailSubject,
            final String emailHtmlBodyText) {

        MimeMessagePreparator preparator = new MimeMessagePreparator() {
            public void prepare(MimeMessage mimeMessage) {
                MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
                try {
                    message.setTo(toEmailAddress);
                    message.setCc(ccEmailAdress);
                    message.setSubject(emailSubject);
                    message.setText(emailHtmlBodyText, true);
                } catch (MessagingException e) {
                    throw new RuntimeException(e);
                }
            }
        };
        mailSender.send(preparator);
    }

    public void sendEmail(final String toEmailAddress, final String[] ccEmailAdress, final String emailSubject,
            final String emailHtmlBodyText) {

        MimeMessagePreparator preparator = new MimeMessagePreparator() {
            public void prepare(MimeMessage mimeMessage) {
                MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
                try {
                    message.setTo(toEmailAddress);
                    message.setCc(ccEmailAdress);
                    message.setSubject(emailSubject);
                    message.setText(emailHtmlBodyText, true);
                } catch (MessagingException e) {
                    throw new RuntimeException(e);
                }
            }
        };
        mailSender.send(preparator);
    }

    public void sendEmail(final String toEmailAddress, final String emailSubject, final String emailHtmlBodyText) {

        MimeMessagePreparator preparator = new MimeMessagePreparator() {
            public void prepare(MimeMessage mimeMessage) {
                MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
                try {
                    message.setTo(toEmailAddress);
                    message.setSubject(emailSubject);
                    message.setText(emailHtmlBodyText, true);
                } catch (MessagingException e) {
                    throw new RuntimeException(e);
                }
            }
        };
        mailSender.send(preparator);
    }

}