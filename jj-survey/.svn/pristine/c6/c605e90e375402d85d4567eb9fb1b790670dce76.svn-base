package kr.ac.jj.survey.application.qestnrmanage.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BizException;
import kr.ac.jj.shared.infrastructure.grid.handler.GridDataResultHandler;
import kr.ac.jj.shared.infrastructure.grid.model.GridRequest;
import kr.ac.jj.survey.application.qestnrmanage.mapper.QuestionnaireManageMapper;
import kr.ac.jj.survey.application.qestnrmanage.model.QuestionnaireManageModel;
import kr.ac.jj.survey.application.templatemanage.model.TemplateManageModel;
import kr.ac.jj.survey.application.templatemanage.service.TemplateManageServiceImpl;
import kr.ac.jj.survey.domain.main.mapper.jd.survey.definition.JdSurveyDefinitionMapper;
import kr.ac.jj.survey.domain.main.mapper.survey.qestnr.TbSurveyQestnrMapper;
import kr.ac.jj.survey.domain.main.mapper.survey.qestnr.cmmn.TbSurveyQestnrCmmnMapper;
import kr.ac.jj.survey.domain.main.model.jd.survey.definition.JdSurveyDefinition;
import kr.ac.jj.survey.domain.main.model.survey.qestnr.TbSurveyQestnr;
import kr.ac.jj.survey.domain.main.model.survey.qestnr.cmmn.TbSurveyQestnrCmmn;
import kr.ac.jj.survey.domain.main.model.survey.tmplat.TbSurveyTmplat;
import kr.ac.jj.survey.domain.main.service.jd.survey.definition.JdSurveyDefinitionServiceImpl;

/**
 * 설문지 관리 Service
 */
@Service
public class QuestionnaireManageServiceImpl {

    private @Autowired QuestionnaireManageMapper questionnaireManageMapper;
    private @Autowired TbSurveyQestnrMapper tbSurveyQestnrMapper;
    private @Autowired TbSurveyQestnrCmmnMapper tbSurveyQestnrCmmnMapper;
    private @Autowired JdSurveyDefinitionMapper jdSurveyDefinitionMapper;
    private @Autowired JdSurveyDefinitionServiceImpl jdSurveyDefinitionService;
    private @Autowired TemplateManageServiceImpl templateManageService;

    /**
     * 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readList(GridRequest gridRequest) {
        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);

        questionnaireManageMapper.selectList(resultHandler, gridRequest.getPaging(), gridRequest.getSearch());

        return resultHandler.getResultList();
    }

    /**
     * 조회 - 생성용
     *
     * @return
     */
    public QuestionnaireManageModel read() {
        QuestionnaireManageModel model = new QuestionnaireManageModel();

        TbSurveyQestnr tbSurveyQestnr = new TbSurveyQestnr();
        TbSurveyQestnrCmmn tbSurveyQestnrCmmn = new TbSurveyQestnrCmmn();
        JdSurveyDefinition jdSurveyDefinition = new JdSurveyDefinition();

        model.setTbSurveyQestnr(tbSurveyQestnr);
        model.setTbSurveyQestnrCmmn(tbSurveyQestnrCmmn);
        model.setJdSurveyDefinition(jdSurveyDefinition);

        return model;
    }

    /**
     * 조회
     *
     * @param surveyQestnrId
     * @return
     */
    public QuestionnaireManageModel read(String surveyQestnrId) {
        QuestionnaireManageModel model = new QuestionnaireManageModel();

        TbSurveyQestnr tbSurveyQestnr = tbSurveyQestnrMapper.select(surveyQestnrId);

        model.setTbSurveyQestnr(tbSurveyQestnr);
        model.setTbSurveyQestnrCmmn(tbSurveyQestnrCmmnMapper.select(surveyQestnrId));
        model.setJdSurveyDefinition(jdSurveyDefinitionMapper.select(tbSurveyQestnr.getSurveyDefinitionId()));

        return model;
    }

    /**
     * 생성
     *
     * @param model
     * @return
     */
    public String create(QuestionnaireManageModel model) {
        TbSurveyQestnr tbSurveyQestnr = model.getTbSurveyQestnr().newId();

        JdSurveyDefinition jdSurveyDefinition = model.getJdSurveyDefinition();
        jdSurveyDefinition.setId(null);
        jdSurveyDefinition.setIsPublic(false);
        jdSurveyDefinition.setAllowMultipleSubmissions(false);
        jdSurveyDefinition.setAutoRemindersDayOfMonth(1);
        jdSurveyDefinition.setRemindersFrequency("WEEKLY");
        jdSurveyDefinition.setAutoRemindersMonthlyOccur(1);
        jdSurveyDefinition.setAutoRemindersWeeklyOccur(1);
        jdSurveyDefinition.setCompletedSurveyTemplate("completedSurveyTemplate");
        jdSurveyDefinition.setEmailInvitationTemplate("emailInvitationTemplate");
        jdSurveyDefinition.setSendAutoReminders(0);
        jdSurveyDefinition.setStatus("I");
        jdSurveyDefinition.setSurveyTheme("STANDARD");
        jdSurveyDefinition.setRegistDt(new Date());
        jdSurveyDefinition.setDepartmentId(1L);
        jdSurveyDefinition.setVersion(0);
        jdSurveyDefinitionMapper.insert(jdSurveyDefinition);

        tbSurveyQestnr.setSurveyDefinitionId(jdSurveyDefinition.getId());
        tbSurveyQestnrMapper.insert(tbSurveyQestnr);

        TbSurveyQestnrCmmn tbSurveyQestnrCmmn = model.getTbSurveyQestnrCmmn();
        tbSurveyQestnrCmmn.setSurveyQestnrId(tbSurveyQestnr.getSurveyQestnrId());
        tbSurveyQestnrCmmnMapper.insert(tbSurveyQestnrCmmn);

        jdSurveyDefinitionService.createCopy(model.getSurveyDefinitionId(), jdSurveyDefinition);

        return tbSurveyQestnr.getSurveyQestnrId();
    }

    /**
     * 수정
     *
     * @param model
     */
    public void update(QuestionnaireManageModel model) {
        TbSurveyQestnr tbSurveyQestnr = model.getTbSurveyQestnr();
        TbSurveyQestnrCmmn tbSurveyQestnrCmmn = model.getTbSurveyQestnrCmmn();
        JdSurveyDefinition jdSurveyDefinition = model.getJdSurveyDefinition();

        QuestionnaireManageModel modelDb = this.read(model.getTbSurveyQestnr().getSurveyQestnrId());

        if (!modelDb.isEditable()) {
            throw new BizException("수정할 수 없는 설문지입니다.");
        }

        tbSurveyQestnrMapper.update(tbSurveyQestnr);

        if (tbSurveyQestnrCmmnMapper.update(tbSurveyQestnrCmmn) == 0) {
            tbSurveyQestnrCmmn.setSurveyQestnrId(tbSurveyQestnr.getSurveyQestnrId());
            tbSurveyQestnrCmmnMapper.insert(tbSurveyQestnrCmmn);
        }

        jdSurveyDefinitionMapper.update(jdSurveyDefinition);
    }

    /**
     * 삭제
     *
     * @param surveyQestnrId
     */
    public void delete(String surveyQestnrId) {
        QuestionnaireManageModel modelDb = this.read(surveyQestnrId);
        TbSurveyQestnr tbSurveyQestnrDb = modelDb.getTbSurveyQestnr();

        if (!modelDb.isEditable()) {
            throw new BizException("삭제할 수 없는 설문지입니다.");
        }

        tbSurveyQestnrCmmnMapper.delete(surveyQestnrId);
        tbSurveyQestnrMapper.delete(surveyQestnrId);
        jdSurveyDefinitionService.delete(tbSurveyQestnrDb.getSurveyDefinitionId());
    }

    /**
     * 템플릿 검색 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readTemplateSearchList(GridRequest gridRequest) {
        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);

        questionnaireManageMapper.selectTemplateSearchList(resultHandler, gridRequest.getPaging(),
                gridRequest.getSearch());

        return resultHandler.getResultList();
    }

    /**
     * 템플릿 조회 - 생성용
     *
     * @param surveyTmplatId
     * @return
     */
    public QuestionnaireManageModel readTemplate(String surveyTmplatId) {
        TemplateManageModel templateManageModel = templateManageService.read(surveyTmplatId);
        TbSurveyTmplat tbSurveyTmplat = templateManageModel.getTbSurveyTmplat();

        TbSurveyQestnr tbSurveyQestnr = new TbSurveyQestnr();
        tbSurveyQestnr.setSurveyDefinitionId(tbSurveyTmplat.getSurveyDefinitionId());
        tbSurveyQestnr.setSurveyRealmId(tbSurveyTmplat.getSurveyRealmId());
        tbSurveyQestnr.setSurveyRealmNm(tbSurveyTmplat.getSurveyRealmNm());
        tbSurveyQestnr.setCnrsYn("");
        tbSurveyQestnr.setQestnrGdcc(tbSurveyTmplat.getQestnrGdcc());
        tbSurveyQestnr.setQestnrEndc(tbSurveyTmplat.getQestnrEndc());
        tbSurveyQestnr.setQestnrSknWeb(tbSurveyTmplat.getQestnrSknWeb());
        tbSurveyQestnr.setQestnrSknMobile(tbSurveyTmplat.getQestnrSknMobile());
        tbSurveyQestnr.setQestnrFontNm(tbSurveyTmplat.getQestnrFontNm());
        tbSurveyQestnr.setQestnrFontMg(tbSurveyTmplat.getQestnrFontMg());
        tbSurveyQestnr.setQestnrFontColor(tbSurveyTmplat.getQestnrFontColor());

        QuestionnaireManageModel model = new QuestionnaireManageModel();

        model.setTbSurveyQestnr(tbSurveyQestnr);
        model.setJdSurveyDefinition(templateManageModel.getJdSurveyDefinition());
        model.setSurveyDefinitionId(tbSurveyTmplat.getSurveyDefinitionId());

        return model;
    }

    /**
     * 이전 설문지 검색 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readPrevSurveySearchList(GridRequest gridRequest) {
        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);

        questionnaireManageMapper.selectPrevSurveySearchList(resultHandler, gridRequest.getPaging(),
                gridRequest.getSearch());

        return resultHandler.getResultList();
    }

    /**
     * 이전 설문지 조회 - 생성용
     *
     * @param surveyQestnrId
     * @return
     */
    public QuestionnaireManageModel readPrevSurvey(String surveyQestnrId) {
        QuestionnaireManageModel model = this.read(surveyQestnrId);
        TbSurveyQestnr tbSurveyQestnr = model.getTbSurveyQestnr();

        JdSurveyDefinition jdSurveyDefinition = model.getJdSurveyDefinition();
        jdSurveyDefinition.setStartDt(null);
        jdSurveyDefinition.setEndDt(null);

        model.setSurveyDefinitionId(tbSurveyQestnr.getSurveyDefinitionId());

        return model;
    }

}
