function UserLoginViewService(vue) {

    /**
     * 로그인
     */
    this.login = function(loginPath, targetUrl) {
        var data;
        var config;

        if (vue.model.ssoKey == null) {
            if (!ValidationUtil.check(vue)) {
                return;
            }

            data = new FormData();
            data.append("loginNm", vue.model.loginNm);
            data.append("loginPassword", vue.model.loginPassword);
        } else {
            config = {
                headers: {
                    loginTy: "SSO",
                    username: vue.model.ssoKey
                }
            };
        }

        CommonUtil.axios()
        .post("/common/user/login.do", data, config)
        .then(function(response) {
            if (response.data == "UsernameEmptyValueException") {
                vue.viewLogin();
            } else if (response.data == "UsernameNotFoundException") {
                vue.viewLogin();
            } else if (window.location.pathname != loginPath) {
                if (vue.model.ssoKey == null) {
                    window.location.reload();
                } else {
                    window.location.replace(getUrlParamRemoved("ssoKey"));
                }
            } else if (targetUrl != "") {
                window.location.replace(targetUrl);
            } else {
                window.location.replace(CommonUtil.contextPath + "/");
            }
        })
        ["catch"](function(error) {
            CommonUtil.showAxiosError(error);
        });
    }

    function getUrlParamRemoved(name) {
        var url = window.location.href;

        url = url.replace("?" + name + "=" + vue.model[name], "");
        url = url.replace("&" + name + "=" + vue.model[name], "");

        return url;
    }

}
