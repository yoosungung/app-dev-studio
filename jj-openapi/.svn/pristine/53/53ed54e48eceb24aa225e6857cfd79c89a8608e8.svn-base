package kr.ac.jj.openapi.application.openapi.keystatus.service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.ac.jj.openapi.application.openapi.keystatus.mapper.KeyStatusMapper;
import kr.ac.jj.openapi.application.openapi.keystatus.model.KeyStatusModel;
import kr.ac.jj.openapi.domain.main.mapper.api.svc.key.TbApiSvcKeyMapper;
import kr.ac.jj.openapi.domain.main.model.api.svc.key.TbApiSvcKey;
import kr.ac.jj.shared.application.common.user.model.LoginUser;
import kr.ac.jj.shared.domain.main.mapper.com.person.TbComPersonMapper;
import kr.ac.jj.shared.domain.main.model.com.person.TbComPerson;
import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BizException;
import kr.ac.jj.shared.infrastructure.framework.web.context.session.SessionContextUtil;
import kr.ac.jj.shared.infrastructure.framework.web.context.support.MessageUtil;
import kr.ac.jj.shared.infrastructure.grid.handler.GridDataResultHandler;
import kr.ac.jj.shared.infrastructure.grid.model.GridRequest;

/**
 * 키 신청 현황 Service
 */
@Service
public class KeyStatusServiceImpl {

    private @Autowired KeyStatusMapper keyStatusMapper;
    private @Autowired TbApiSvcKeyMapper tbApiSvcKeyMapper;
    private @Autowired TbComPersonMapper tbComPersonMapper;

    /**
     * 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readList(GridRequest gridRequest) {
        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);

        keyStatusMapper.selectList(resultHandler, gridRequest.getPaging(), gridRequest.getSearch());

        return resultHandler.getResultList();
    }

    /**
     * 조회 - 생성용
     *
     * @return
     */
    public KeyStatusModel read() {
        KeyStatusModel model = new KeyStatusModel();

        TbApiSvcKey tbApiSvcKey = new TbApiSvcKey();
        tbApiSvcKey.setSttus("A");

        LoginUser loginUser = SessionContextUtil.getLoginUser();
        TbComPerson tbComPerson = loginUser.getTbComPerson();

        model.setTbApiSvcKey(tbApiSvcKey);
        model.setTbComPerson(tbComPerson);

        return model;
    }

    /**
     * 조회
     *
     * @param svckeyId
     * @return
     */
    public KeyStatusModel read(String svckeyId) {
        KeyStatusModel model = new KeyStatusModel();

        TbApiSvcKey tbApiSvcKey = tbApiSvcKeyMapper.select(svckeyId);
        TbComPerson tbComPerson = tbComPersonMapper.select(tbApiSvcKey.getApplcntId());

        model.setTbApiSvcKey(tbApiSvcKey);
        model.setTbComPerson(tbComPerson);

        return model;
    }

    /**
     * 생성
     *
     * @param model
     * @return
     */
    public String create(KeyStatusModel model) {
        TbApiSvcKey tbApiSvcKey = model.getTbApiSvcKey().newId();

        if (tbApiSvcKeyMapper.insert(tbApiSvcKey) == 0) {
            throw new BizException(MessageUtil.getMessage("admin.sysmanage.codemanage.message.codeGroupCreateNotAvail",
                    "서비스 키 \"{0}\" 을 생성할 수가 없습니다."));
        }

        return tbApiSvcKey.getSvcKeyId();
    }

    /**
     * 수정
     *
     * @param model
     */
    public void update(KeyStatusModel model) {
        if (!this.read(model.getTbApiSvcKey().getSvcKeyId()).isEditable()) {
            throw new BizException(MessageUtil.getMessage("common.message.notAvail.update", "수정할 수 없는 데이터입니다."));
        }

        TbApiSvcKey tbApiSvcKey = model.getTbApiSvcKey();

        tbApiSvcKeyMapper.update(tbApiSvcKey);
    }

    /**
     * 삭제
     *
     * @param svckeyId
     */
    public void delete(String svckeyId) {
        if (!this.read(svckeyId).isEditable()) {
            throw new BizException(MessageUtil.getMessage("common.message.notAvail.delete", "삭제할 수 없는 데이터입니다."));
        }

        tbApiSvcKeyMapper.delete(svckeyId);
    }

}
