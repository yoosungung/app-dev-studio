package kr.ac.jj.openapi.application.openapi.keymanage.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.ac.jj.openapi.application.openapi.keymanage.mapper.KeyManageMapper;
import kr.ac.jj.openapi.application.openapi.keymanage.model.KeyManageModel;
import kr.ac.jj.openapi.domain.main.mapper.api.svc.key.TbApiSvcKeyMapper;
import kr.ac.jj.openapi.domain.main.model.api.svc.key.TbApiSvcKey;
import kr.ac.jj.shared.application.common.user.model.LoginUser;
import kr.ac.jj.shared.domain.main.mapper.com.person.TbComPersonMapper;
import kr.ac.jj.shared.domain.main.model.com.person.TbComPerson;
import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BizException;
import kr.ac.jj.shared.infrastructure.framework.web.context.session.SessionContextUtil;
import kr.ac.jj.shared.infrastructure.grid.handler.GridDataResultHandler;
import kr.ac.jj.shared.infrastructure.grid.model.GridRequest;

/**
 * 키 발급 관리 Service
 */
@Service
public class KeyManageServiceImpl {

    private @Autowired KeyManageMapper keyManageMapper;
    private @Autowired TbApiSvcKeyMapper tbApiSvcKeyMapper;
    private @Autowired TbComPersonMapper tbComPersonMapper;

    /**
     * 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readList(GridRequest gridRequest) {
        gridRequest.getSearch().longToDate("beginDt", "endDt");
        gridRequest.getSearch().addDays("endDt", 1);

        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);

        keyManageMapper.selectList(resultHandler, gridRequest.getPaging(), gridRequest.getSearch());

        return resultHandler.getResultList();
    }

    /**
     * 조회
     *
     * @param svckeyId
     * @return
     */
    public KeyManageModel read(String svckeyId) {
        KeyManageModel model = new KeyManageModel();

        TbApiSvcKey tbApiSvcKey = tbApiSvcKeyMapper.select(svckeyId);
        TbComPerson tbApplcnt = tbComPersonMapper.select(tbApiSvcKey.getApplcntId());

        LoginUser loginUser = SessionContextUtil.getLoginUser();
        TbComPerson tbComPerson = new TbComPerson();

        if("".equals(tbApiSvcKey.getExmntPsnId()) || tbApiSvcKey.getExmntPsnId() == null) {
            tbComPerson = loginUser.getTbComPerson();
        }else {
            tbComPerson = tbComPersonMapper.select(tbApiSvcKey.getExmntPsnId());
        }

        if(tbApiSvcKey.getCallCoPday() == null) {
            tbApiSvcKey.setCallCoPday(1000);
        }

        model.setTbApiSvcKey(tbApiSvcKey);
        model.setTbApplcnt(tbApplcnt);
        model.setTbComPerson(tbComPerson);

        return model;
    }

    /**
     * 검토(승인/반려)
     *
     * @param model
     */
    public void update(KeyManageModel model) {
        if (!this.read(model.getTbApiSvcKey().getSvcKeyId()).isEditable()) {
            throw new BizException("검토 할 수 없는 데이터입니다.");
        }

        TbApiSvcKey tbApiSvcKey = model.getTbApiSvcKey();

        LoginUser loginUser = SessionContextUtil.getLoginUser();

        tbApiSvcKey.setExmntPsnId(loginUser.getPersonId());
        tbApiSvcKey.setExmntDt(new Date());

        tbApiSvcKeyMapper.update(tbApiSvcKey);
    }

}
