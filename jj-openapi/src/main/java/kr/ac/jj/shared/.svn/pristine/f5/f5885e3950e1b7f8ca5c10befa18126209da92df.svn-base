package kr.ac.jj.shared.application.bbs.notice.service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.ac.jj.shared.application.bbs.notice.mapper.BbsNoticeMapper;
import kr.ac.jj.shared.application.bbs.notice.model.BbsNoticeModel;
import kr.ac.jj.shared.application.common.user.model.LoginUser;
import kr.ac.jj.shared.domain.main.mapper.bbs.notice.TbBbsNoticeMapper;
import kr.ac.jj.shared.domain.main.mapper.com.person.TbComPersonMapper;
import kr.ac.jj.shared.domain.main.model.bbs.notice.TbBbsNotice;
import kr.ac.jj.shared.domain.main.model.com.person.TbComPerson;
import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BizException;
import kr.ac.jj.shared.infrastructure.framework.web.context.session.SessionContextUtil;
import kr.ac.jj.shared.infrastructure.framework.web.context.support.MessageUtil;
import kr.ac.jj.shared.infrastructure.grid.handler.GridDataResultHandler;
import kr.ac.jj.shared.infrastructure.grid.model.GridRequest;

/**
 * 게시판(공지사항) Service
 */
@Service
public class BbsNoticeServiceImpl {

    private @Autowired BbsNoticeMapper bbsNoticeMapper;
    private @Autowired TbBbsNoticeMapper tbbbsNoticeMapper;
    private @Autowired TbComPersonMapper tbComPersonMapper;

    /**
     * 목록 조회
     *
     * @param gridRequest
     * @return
     */
    public List<Map<String, Object>> readList(GridRequest gridRequest) {
        GridDataResultHandler resultHandler = new GridDataResultHandler(gridRequest);
        bbsNoticeMapper.selectList(resultHandler, gridRequest.getPaging(), gridRequest.getSearch());
        return resultHandler.getResultList();
    }

    /**
     * 조회 - 생성용
     *
     * @return
     */
    public BbsNoticeModel read() {
         BbsNoticeModel model = new BbsNoticeModel();
         TbBbsNotice tbNoticeFaq = new TbBbsNotice();
         model.setTbBbsNotice(tbNoticeFaq);
         return model;
    }

    /**
     * 조회
     *
     * @param bbscttId
     * @return
     */
    public BbsNoticeModel read(String bbscttId) {
        BbsNoticeModel model =new BbsNoticeModel();
        TbBbsNotice tbBbsNotice =tbbbsNoticeMapper.select(bbscttId);

        LoginUser loginUser = SessionContextUtil.getLoginUser();
        TbComPerson tbComPerson = loginUser.getTbComPerson();

        model.setTbComPerson(tbComPerson);
        model.setTbBbsNotice(tbBbsNotice);
        return model;
    }

    /**
     * 생성
     *
     * @param model
     * @return
     */
    public String create(BbsNoticeModel model) {
        TbBbsNotice tbbbsnotice = model.getTbBbsNotice().newId();
        tbbbsnotice.setRdcnt(0);
        tbbbsnotice.setDeleteYn(true);
        tbbbsNoticeMapper.insert(tbbbsnotice);
        return tbbbsnotice.getBbscttId();
    }

    /**
     * 수정
     *
     * @param model
     */
    public void update(BbsNoticeModel model) {
        if (!this.read(model.getTbBbsNotice().getBbscttId()).isEditable()) {
            throw new BizException(MessageUtil.getMessage("common.message.notAvail.update", "수정할 수 없는 데이터입니다."));
        }
        TbBbsNotice tbBbsFaq = model.getTbBbsNotice();
        tbbbsNoticeMapper.update(tbBbsFaq);
    }

    /**
     * 삭제
     *
     * @param bbscttId
     */
    public void delete(String bbscttId) {
         if (!this.read(bbscttId).isEditable()) {
             throw new BizException(MessageUtil.getMessage("common.message.notAvail.delete", "삭제할 수 없는 데이터입니다."));
         }
         tbbbsNoticeMapper.delete(bbscttId);
    }

}
