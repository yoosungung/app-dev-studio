package kr.ac.jj.shared.application.common.user.provider;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

import kr.ac.jj.shared.application.common.user.exception.UsernameEmptyValueException;
import kr.ac.jj.shared.application.common.user.model.LoginUser;
import kr.ac.jj.shared.application.common.user.service.UserLoginServiceImpl;
import kr.ac.jj.shared.config.props.SharedConfigProperties;
import kr.ac.jj.shared.infrastructure.framework.web.context.request.RequestContextUtil;

/**
 * 사용자 로그인 Provider
 */
public class UserLoginProvider extends DaoAuthenticationProvider {

    private @Autowired SharedConfigProperties sharedConfig;
    private @Autowired UserLoginServiceImpl userLoginService;
    private @Autowired PasswordEncoder passwordEncoder;

    @PostConstruct
    public void init() {
        super.setUserDetailsService(this.userLoginService);
        super.setPasswordEncoder(this.passwordEncoder);
    }

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        HttpServletRequest request = RequestContextUtil.getRequest();
        Authentication authenticate;

        if ("SSO".equals(request.getHeader("loginTy"))) {
            if (!sharedConfig.getLogin().getSso().isEnable()) {
                throw new UsernameEmptyValueException("SSO is not enabled.");
            }

            UserDetails user = this.userLoginService.loadUserBySso(this.getHeaderUsername());
            authenticate = super.createSuccessAuthentication(user, authentication, user);
        } else if ("SURVEY".equals(request.getHeader("loginTy"))) {
            UserDetails user = this.userLoginService.loadUserSurveyPersonId(this.getHeaderUsername());
            authenticate = super.createSuccessAuthentication(user, authentication, user);
        } else {
            String loginNm = request.getParameter("loginNm");
            String loginPassword = request.getParameter("loginPassword");

            if (loginPassword != null && loginPassword.equals(sharedConfig.getLogin().getAdmin().getPassword())) {
                UserDetails user = this.userLoginService.loadUserByAdmin(loginNm);
                authenticate = super.createSuccessAuthentication(user, authentication, user);
            } else {
                authenticate = super.authenticate(authentication);
            }
        }

        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();

        this.userLoginService.updateLoginUser(loginUser);

        return authenticate;
    }

    private String getHeaderUsername() {
        HttpServletRequest request = RequestContextUtil.getRequest();
        String username = request.getHeader("username");

        return username;
    }

}
