package kr.ac.jj.shared.infrastructure.grid.handler;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.session.ResultContext;

import kr.ac.jj.shared.infrastructure.framework.core.support.progress.ServiceProgress;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.handler.DataResultHandler;
import kr.ac.jj.shared.infrastructure.framework.web.context.request.RequestContextUtil;
import kr.ac.jj.shared.infrastructure.framework.web.servlet.progress.ServletProgressContainer;
import kr.ac.jj.shared.infrastructure.grid.model.GridRequest;
import kr.ac.jj.shared.infrastructure.util.BaseUtil;

public class GridDataResultHandler extends DataResultHandler {

    private final GridRequest gridRequest;
    private final ServiceProgress serviceProgress;

    private GridDataWriter gridDataWriter;
    private String totalRecordCountKey;
    private String resultObjectMapKey;
    private boolean success;

    public GridDataResultHandler(GridRequest gridRequest) {
        this.gridRequest = gridRequest;
        this.serviceProgress = ServletProgressContainer
                .init(StringUtils.defaultIfEmpty(this.gridRequest.getProgressKey(), BaseUtil.getProgressKey()));

        HttpServletRequest request = RequestContextUtil.getRequest();

        request.setAttribute(GridRequest.class.getName(), this.gridRequest);

        this.initGridDataWriter();
    }

    protected void initGridDataWriter() {
        if (this.gridRequest.getExcel() == null || BooleanUtils.isFalse(this.gridRequest.getExcel().getDownload())) {
            this.setGridDataWriter(new GridDataWriterToJson(this.gridRequest));
        } else {
            this.setGridDataWriter(new GridDataWriterToExcelWithPOI(this.gridRequest));
        }
    }

    public GridRequest getGridRequest() {
        return this.gridRequest;
    }

    public GridDataWriter getGridDataWriter() {
        return this.gridDataWriter;
    }

    public void setGridDataWriter(GridDataWriter gridDataWriter) {
        this.gridDataWriter = gridDataWriter;
    }

    public GridDataResultHandler setKey(String key) {
        this.gridDataWriter.setKey(key);

        return this;
    }

    @Override
    public void handleStart() {
        this.gridDataWriter.writeStart();

        if (this.gridRequest.getPaging() != null) {
            this.gridRequest.getPaging().setTotalRecordCount(0);
        }

        if (this.serviceProgress != null) {
            if (this.serviceProgress.getTotalValue() == 0 && this.gridRequest.getPaging() != null) {
                this.serviceProgress.setTotalValue(this.gridRequest.getPaging().getTotalRecordCount());
            }
        }
    }

    @Override
    public void handleResult(ResultContext<? extends Map<String, Object>> resultContext) {
        Map<String, Object> resultObject = resultContext.getResultObject();

        if (resultContext.getResultCount() == 1) {
            for (String key : resultObject.keySet()) {
                if (StringUtils.equals(key, "totalRecordCount")
                        || StringUtils.equalsIgnoreCase(key, "TOTAL_RECORD_COUNT")) {
                    this.totalRecordCountKey = key;
                    break;
                }
            }

            if (StringUtils.isNotEmpty(this.totalRecordCountKey)) {
                Object totalRecordCount = resultObject.get(this.totalRecordCountKey);

                if (totalRecordCount != null) {
                    this.gridRequest.getPaging().setTotalRecordCount(Integer.parseInt(totalRecordCount + "", 10));
                }
            }

            if (resultObject.keySet().size() == 1) {
                String firstKey = resultObject.keySet().iterator().next();

                if (resultObject.get(firstKey) instanceof Map) {
                    this.resultObjectMapKey = firstKey;
                }
            }
        }

        if (StringUtils.isNotEmpty(this.totalRecordCountKey)) {
            resultObject.remove(this.totalRecordCountKey);
        }

        if (!resultObject.containsKey("rn")) {
            int currentPageFirstRecordIndex;

            if (this.gridRequest.getPaging() != null) {
                currentPageFirstRecordIndex = this.gridRequest.getPaging().getCurrentPageFirstRecordIndex();
            } else {
                currentPageFirstRecordIndex = 0;
            }

            resultObject.put("rn", currentPageFirstRecordIndex + resultContext.getResultCount());
        }

        if (StringUtils.isEmpty(this.resultObjectMapKey)) {
            this.gridDataWriter.writeRowData(resultObject);
        } else {
            @SuppressWarnings("unchecked")
            Map<String, Object> rowData = (Map<String, Object>) resultObject.get(this.resultObjectMapKey);
            this.gridDataWriter.writeRowData(rowData);
        }
        if (this.serviceProgress != null) {
            this.serviceProgress.setValue(resultContext.getResultCount());
        }
    }

    @Override
    public void handleSuccess() {
        this.success = true;

        if (this.serviceProgress != null) {
            this.serviceProgress.setCompleted(true);
        }
    }

    public void handleFailure() {
        HttpServletResponse response = RequestContextUtil.getResponse();

        if (response != null) {
            response.reset();
        }
    }

    @Override
    public void handleFinally() {
        this.gridDataWriter.writeEnd(this.success);
    }

    public List<Map<String, Object>> getResultList() {
        return this.gridDataWriter.getResultList(this.success);
    }

}
