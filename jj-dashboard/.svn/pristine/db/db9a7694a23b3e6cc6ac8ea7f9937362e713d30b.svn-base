function SuperCompetenceViewService(vue) {
    this.drawGraph = {};

    this.drawGraph["avgGraph"] = function(search) {
        CommonUtil.axios()
        .post("readAvgData", search)
        .then(function(response) {

            var dataValueList = [];
            var dataAvg = response.data[0]

            var dataValue = {
                    name : "",
                    value : []
                }
            for (var key of Object.keys(dataAvg)) {
                dataValue.value.push(dataAvg[key]);
            }
            dataValue.name = '전체평균';
            dataValueList.push(dataValue);


            var myChart = echarts.init(document.getElementById('avgGraph'));
            var option = {
                title: {
                    text: '전체평균',
                    left: 'center'
                },
                tooltip: {},
                radar: {
                    axisLabel: {
                        show: true,
                        showMinLabel: false
                    },
                    name: {
                        textStyle: {
                            color: '#fff',
                            backgroundColor: '#999',
                            borderRadius: 3,
                            padding: [3, 5]
                        }
                    },
                    indicator: [
                        { name: '영성,인성', max: 65},
                        { name: '의사소통', max: 65},
                        { name: '자기개발', max: 65},
                        { name: '창의융합', max: 65},
                        { name: '+형 협력', max: 65}
                    ],
                    center: ['50%', '60%']
                },
                series: [{
                    name: '전체평균',
                    type: 'radar',
                    data: dataValueList
                }]
            };
            myChart.setOption(option);
        })
        ["catch"](function(error) {
            CommonUtil.showAxiosError(error);
        });
    }
    this.drawGraph["dataGraph"] = function(search) {
        var readOption = "";
        if(search.daehakName === "") {
            readOption = "readAvgDaehakData";
        }
        else if(search.hakbuName === "") {
            readOption = "readDaehakYearData";
        }
        else if(search.hakbuName !== "") {
            readOption = "readHakbuData";
        }
        CommonUtil.axios()
        .post(readOption, search)
        .then(function(response) {
            var data = response.data;

            console.log(data);

            //echart variables
            var dataName = [];
            var dataValueList = [];

            var dataValue = {
                    name : "",
                    value : []
                }
            //echart

            //grid variables
            var tableColumnList = []; //{title:"Name", field:"name", align:"center", width:150}
            var tableColumn = {};
            var tableDataList = []; //{id:1, name:"Oli Bob", age:"12", col:"red", dob:""}
            var tableData = {};

            var tableOption = {
                height: 190,
                layout: "fitDataFill"
            }
            //grid

            for (var i=0; i<data.length; i++) {
                if(readOption === "readDaehakYearData") {
                    dataName.push(data[i].hakgYear);
                    dataValue.name = data[i].hakgYear;

                    tableColumn.title = data[i].hakgYear;
                    tableColumn.field = data[i].hakgYear;
                }
                //대학만 선택될 경우
                else if (readOption === "readDaehakData" || readOption === "readAvgDaehakData"){
                    dataName.push(data[i].daehakName);
                    dataValue.name = data[i].daehakName;

                    tableColumn.title = data[i].daehakName;
                    tableColumn.field = data[i].daehakName;
                }
                else if (readOption === "readHakbuData" || readOption === "readAvgHakbuData") {
                    dataName.push(data[i].hakgYear);
                    dataValue.name = data[i].hakgYear;
                    tableColumn.title = data[i].hakgYear;
                    tableColumn.field = data[i].hakgYear;
                }
                dataValue.value.push(data[i].sPoint);
                dataValue.value.push(data[i].uPoint);
                dataValue.value.push(data[i].pPoint);
                dataValue.value.push(data[i].ePoint);
                dataValue.value.push(data[i].rPoint);

                var copy = copyObject(dataValue);
                dataValueList.push(copy);
                dataValue.value = [];

                tableColumn.width = 130;
                var copy = copyObject(tableColumn);
                tableColumnList.push(copy);
                tableColumn = {};
            }

            var rowIds = ['s', 'u', 'p', 'e', 'r'];
            var headers = ['영성/인성(S)', '의사소통(U)', '자기개발(P)', '창의융합(E)', '+형협력(R)'];

            for (var i=0; i<rowIds.length; i++) {
                tableData.header = headers[i];
                tableData.id = rowIds[i];
                for (var j=0; j<data.length; j++) {
                    tableData[data[j].daehakName] = data[j][rowIds[i] + "Point"];
                    tableData[data[j].hakgYear] = data[j][rowIds[i] + "Point"];
                }
                var copy = copyObject(tableData);
                tableDataList.push(copy);
                tableData = {};
            }
            console.log(tableDataList);


            tableColumnList.unshift({title: "값", field: "header", width: 130});
            tableOption.columns = tableColumnList;

            tableOption.data = tableDataList;

            console.log(tableColumnList);

            var myGrid = new Tabulator(document.getElementById('gridArea'), tableOption);
            var myChart = echarts.init(document.getElementById('dataGraph'));
            var option = {
                title: {
                    text: '대학/학과별',
                    left: 'center'
                },
                tooltip: {},
                legend: {
                    top : '5%',
                    data: dataName
                },
                radar: {
                    axisLabel: {
                        show: true,
                        showMinLabel: false
                    },
                    name: {
                        textStyle: {
                            color: '#fff',
                            backgroundColor: '#999',
                            borderRadius: 3,
                            padding: [3, 5]
                        }
                    },
                    indicator: [
                        { name: '영성,인성', max: 65},
                        { name: '의사소통', max: 65},
                        { name: '자기개발', max: 65},
                        { name: '창의융합', max: 65},
                        { name: '+형 협력', max: 65}
                    ],
                    center: ['50%', '60%']
                },
                series: [{
                    name: 'SUPER',
                    type: 'radar',
                    data: dataValueList
                }]
            };
            myChart.setOption(option);
        })
        ["catch"](function(error) {
            CommonUtil.showAxiosError(error);
        });
    }
}
function copyObject(obj){
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

    const copiedObject = obj.constructor();

    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            copiedObject[key] = copyObject(obj[key]);
        }

    }
    return copiedObject;
}

