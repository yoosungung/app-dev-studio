package com.jd.survey.com.interceptor;

import java.io.Serializable;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.security.authentication.encoding.ShaPasswordEncoder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.context.SecurityContextImpl;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.jd.survey.dao.interfaces.security.GroupDAO;
import com.jd.survey.dao.interfaces.security.UserDAO;
import com.jd.survey.dao.interfaces.settings.SurveyDefinitionDAO;
import com.jd.survey.domain.security.User;
import com.jd.survey.pub.domain.SurveyDefinition;
import com.jd.survey.pub.service.SurveyDefinitionService;
import com.jd.survey.service.security.UserService;
import com.jd.survey.zeus.domain.ZeusUser;
import com.jd.survey.zeus.mapper.ZeusUserMapper;
import com.jd.survey.zeus.service.ZeusUserService;

public class AutoLoginFilter extends AbstractLifeAuthenticationProcessingFilter
{

	public Logger log = LoggerFactory.getLogger(getClass());
	
	@Autowired	private UserDAO userDAO;
	
	@Autowired	private GroupDAO groupDAO;
	
	@Autowired private ZeusUserMapper<Serializable> zeusUserMapper;
	
	@Autowired private SurveyDefinitionDAO surveyDefinitionDAO;
	
	@Autowired private SurveyDefinitionService surveyDefinitionService;
	
	@Autowired	private UserService userService;
	
	@Autowired	private ZeusUserService zeusUserService;
	
	
    public AutoLoginFilter(String filterProcessesUrl) {
		
		super(filterProcessesUrl);
	}

    @Override
	protected boolean requiresAuthentication(HttpServletRequest request,
			HttpServletResponse response) {
		
		String uri = request.getRequestURI();
        int pathParamIndex = uri.indexOf(';');

        if (pathParamIndex > 0) {
            uri = uri.substring(0, pathParamIndex);
        }

        return uri.indexOf(".") == -1 && !uri.trim().equals("/");
	}

   public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
        throws AuthenticationException
    {
	   /*HttpSession se = request.getSession();
	   
	   SecurityContextImpl sci = (SecurityContextImpl)se.getAttribute("ZEUS_SPRING_SECURITY_CONTEXT");

	   System.out.println("sci ============================ "+sci);
	   
	   UserDetails ud = (UserDetails)sci.getAuthentication().getPrincipal();*/
		
	   SecurityContext context = SecurityContextHolder.getContext();
	   String switchZuesUser = "";
	   
	   if(request.getCookies() != null) {
		   
		   for(Cookie cook : request.getCookies()){
			   if("switchZeusUser".equals(cook.getName())){
				   switchZuesUser = cook.getValue();
			   }
		   }
		   
		   if(StringUtils.hasText(switchZuesUser) && context.getAuthentication() == null) {
			   
			   RequestCache requestCache = new HttpSessionRequestCache();
			   requestCache.saveRequest(request, response); // 요청페이지 리퀘스트 저장
			   
			   mergetSurveyDefinitionUser(switchZuesUser);
			   
			   User user = userDAO.findByLogin(switchZuesUser);
			   
			   PasswordEncoder encoder = new ShaPasswordEncoder(256);
			   
			   Authentication authentication = new UsernamePasswordAuthenticationToken(user, encoder.encodePassword("1", user.getSalt()), user.getAuthorities());
			   
			   context.setAuthentication(authentication);
			   return authentication;
		   }
		   else if(StringUtils.hasText(switchZuesUser) && context.getAuthentication() != null){
			   User user = (User)context.getAuthentication().getPrincipal();
			   
			   ZeusUser zeusUser = zeusUserMapper.getUserDtl(user.getLogin());
			   
			   request.setAttribute("mentorYn", zeusUser.isMentorYn());
			   request.setAttribute("partnerYn", zeusUser.isPartnerYn());
			   request.setAttribute("sysMngYn", "ZEUS_SYS_MASTER".equals(zeusUser.getGradeCd()));
			   request.setAttribute("organCd", zeusUser.getOrganCd());
			   
			   request.setAttribute("loginStatus", "login");
		   }
		   else {
			   log.debug("{} (null)", new String[]{request.getRequestURI()});
		   }
	   }
	   
        return null;
    }
   
   /**
	 * 로그인 사용자정보 갱신
	 */
	private void mergetSurveyDefinitionUser(String switchZuesUser) {
		
		User user = userService.user_findByLogin(switchZuesUser);
		
		if(user != null) {
			List<SurveyDefinition> processSurveyList = surveyDefinitionService.getProcessSurveyList();
			
			if(processSurveyList.size()>0) {
				for(com.jd.survey.pub.domain.SurveyDefinition surveyDefinition : processSurveyList) {
					if(userService.getUserSurveyDefinitionCount(surveyDefinition.getSurveyDefinitionId(), user.getId()) == 0){
						userService.addUserSurveyDefinition(surveyDefinition.getSurveyDefinitionId(), user.getId());
					}
				}
			}
		}
		else {
			zeusUserService.addUserServey(switchZuesUser);
			mergetSurveyDefinitionUser(switchZuesUser);
		}
	}
}

