package kr.ac.jj.shared.config.datasource;

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.mapping.VendorDatabaseIdProvider;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.session.LocalCacheScope;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandlerRegistry;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.aop.Advisor;
import org.springframework.aop.aspectj.AspectJExpressionPointcut;
import org.springframework.aop.support.DefaultPointcutAdvisor;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.interceptor.TransactionInterceptor;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import kr.ac.jj.shared.infrastructure.framework.core.foundation.exception.BaseException;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.interceptor.BaseSqlInterceptor;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.interceptor.DataResultHandleInterceptor;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.interceptor.DataUpdatedCheckInterceptor;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.interceptor.SelectQueryWrappingInterceptor;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.interceptor.StatementLogInterceptor;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.scripting.SelectQueryWrappingLanguageDriver;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.type.EmptyToNullTypeHandler;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.type.LONGVARCHARTypeHandler;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.type.LocaleStringTypeHandler;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.type.StringDateTypeHandler;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.dao.variables.MyBatisDataSourceSpec;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.datasource.config.MapperLocationResources;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.datasource.config.TransactionInterceptorFactory;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.datasource.props.DatabaseIdProperties;
import kr.ac.jj.shared.infrastructure.framework.mybatis.persistence.datasource.props.MyBatisConfigProperties;
import kr.ac.jj.shared.infrastructure.framework.web.persistence.dao.variables.WebSqlVariables;
import kr.ac.jj.shared.infrastructure.user.AnonymousUser;
import kr.ac.jj.shared.infrastructure.user.SystemUser;
import net.sf.log4jdbc.sql.jdbcapi.DataSourceSpy;

@Configuration
public class MainDataSourceConfig {

    @Bean(name = "hikariConfig.main")
    @ConfigurationProperties(prefix = "config.datasources.main.hikari")
    public HikariConfig hikariConfig() {
        return new HikariConfig();
    }

    @Bean(name = "myBatisConfig.main")
    @ConfigurationProperties(prefix = "config.datasources.main.mybatis")
    public MyBatisConfigProperties myBatisConfig() {
        return new MyBatisConfigProperties();
    }

    @Bean(name = "dataSource.main")
    public DataSource dataSource() {
        HikariDataSource hikariDataSource = new HikariDataSource(hikariConfig());
        DataSourceSpy dataSource = new DataSourceSpy(hikariDataSource);

        return dataSource;
    }

    @Primary
    @Bean(name = "transactionManager.main")
    public PlatformTransactionManager transactionManager() {
        return new DataSourceTransactionManager(dataSource());
    }

    @Bean(name = "transactionAdvice.main")
    public TransactionInterceptor transactionAdvice() {
        TransactionInterceptorFactory transactionInterceptorFactory = new TransactionInterceptorFactory(
                myBatisConfig());
        transactionInterceptorFactory.setAttributeName("transactionAdvice.main");
        transactionInterceptorFactory.setTransactionManager(transactionManager());

        return transactionInterceptorFactory.getObject();
    }

    @Bean(name = "transactionAdviceAdvisor.main")
    public Advisor transactionAdviceAdvisor() {
        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
        pointcut.setExpression(
                "execution(* *..service.*ServiceImpl.*(..)) || execution(* *..service.impl.*ServiceImpl.*(..))");

        DefaultPointcutAdvisor txAdviceAdvisor = new DefaultPointcutAdvisor();
        txAdviceAdvisor.setPointcut(pointcut);
        txAdviceAdvisor.setAdvice(transactionAdvice());

        return txAdviceAdvisor;
    }

    @Primary
    @Bean(name = "sqlSession.main")
    public SqlSessionTemplate sqlSession() {
        return new SqlSessionTemplate(sqlSessionFactory());
    }

    @Bean(name = "sqlSessionFactory.main")
    public SqlSessionFactory sqlSessionFactory() {
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
        sqlSessionFactoryBean.setDataSource(dataSource());

        Properties databaseIdProperties = new DatabaseIdProperties();

        VendorDatabaseIdProvider databaseIdProvider = new VendorDatabaseIdProvider();
        databaseIdProvider.setProperties(databaseIdProperties);
        sqlSessionFactoryBean.setDatabaseIdProvider(databaseIdProvider);

        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();
        configuration.setCacheEnabled(true);
        configuration.setLocalCacheScope(LocalCacheScope.STATEMENT);
        configuration.setMapUnderscoreToCamelCase(true);
        configuration.setCallSettersOnNulls(true);
        configuration.setJdbcTypeForNull(JdbcType.VARCHAR);
        configuration.setDefaultScriptingLanguage(SelectQueryWrappingLanguageDriver.class);
        sqlSessionFactoryBean.setConfiguration(configuration);

        WebSqlVariables sqlVariables = new WebSqlVariables();
        sqlVariables.setDataSourceSpec(new MyBatisDataSourceSpec(dataSource(), databaseIdProvider));
        sqlVariables.setAnonymousUser(new AnonymousUser());
        sqlVariables.setSystemUser(new SystemUser());

        BaseSqlInterceptor baseSqlInterceptor = new BaseSqlInterceptor();
        baseSqlInterceptor.setSqlVariables(sqlVariables);
        SelectQueryWrappingInterceptor selectQueryWrappingInterceptor = new SelectQueryWrappingInterceptor();
        DataResultHandleInterceptor dataResultHandleInterceptor = new DataResultHandleInterceptor();
        DataUpdatedCheckInterceptor dataUpdatedCheckInterceptor = new DataUpdatedCheckInterceptor();
        StatementLogInterceptor statementLogInterceptor = new StatementLogInterceptor();
        sqlSessionFactoryBean.setPlugins(new Interceptor[] { baseSqlInterceptor, selectQueryWrappingInterceptor,
                dataResultHandleInterceptor, dataUpdatedCheckInterceptor, statementLogInterceptor });

        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();
        typeHandlerRegistry.register(EmptyToNullTypeHandler.class);
        typeHandlerRegistry.register(LocaleStringTypeHandler.class);
        typeHandlerRegistry.register(StringDateTypeHandler.class);
        typeHandlerRegistry.register(LONGVARCHARTypeHandler.class);

        MapperLocationResources mapperLocationResources = new MapperLocationResources(myBatisConfig());
        sqlSessionFactoryBean.setMapperLocations(mapperLocationResources.getResources());

        try {
            return sqlSessionFactoryBean.getObject();
        } catch (Exception e) {
            throw new BaseException(e);
        }
    }

}
