/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { AbstractComponent2, Utils as CoreUtils } from "@blueprintjs/core";
import * as React from "react";
import { polyfill } from "react-lifecycles-compat";
import * as Classes from "../common/classes";
import * as ScrollUtils from "../common/internal/scrollUtils";
import { Utils } from "../common/utils";
import { QuadrantType, TableQuadrant } from "./tableQuadrant";
import { TableQuadrantStackCache } from "./tableQuadrantStackCache";
// when there are no column headers, the header and menu element will
// confusingly collapse to zero height unless we establish this default.
const DEFAULT_COLUMN_HEADER_HEIGHT = 30;
// the debounce delay for updating the view on scroll. elements will be resized
// and rejiggered once scroll has ceased for at least this long, but not before.
const DEFAULT_VIEW_SYNC_DELAY = 500;
// if there are no frozen rows or columns, we still want the quadrant to be 1px
// bigger to reveal the header border. this border leaks into the cell grid to
// ensure that selection overlay borders (e.g.) will be perfectly flush with it.
const QUADRANT_MIN_SIZE = 1;
// a list of props that trigger layout changes. when these props change,
// quadrant views need to be explicitly resynchronized.
const SYNC_TRIGGER_PROP_KEYS = [
    "enableRowHeader",
    "loadingOptions",
    "numFrozenColumns",
    "numFrozenRows",
    "numColumns",
    "numRows",
    "enableColumnInteractionBar",
];
let TableQuadrantStack = class TableQuadrantStack extends AbstractComponent2 {
    // Public
    // ======
    constructor(props, context) {
        super(props, context);
        // Instance variables
        // ==================
        this.quadrantRefs = {
            [QuadrantType.MAIN]: {},
            [QuadrantType.TOP]: {},
            [QuadrantType.LEFT]: {},
            [QuadrantType.TOP_LEFT]: {},
        };
        this.quadrantRefHandlers = {
            [QuadrantType.MAIN]: this.generateQuadrantRefHandlers(QuadrantType.MAIN),
            [QuadrantType.TOP]: this.generateQuadrantRefHandlers(QuadrantType.TOP),
            [QuadrantType.LEFT]: this.generateQuadrantRefHandlers(QuadrantType.LEFT),
            [QuadrantType.TOP_LEFT]: this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT),
        };
        // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the
        // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.
        this.wasMainQuadrantScrollTriggeredByWheelEvent = false;
        // Quadrant-specific renderers
        // ===========================
        // Menu
        this.renderMainQuadrantMenu = () => {
            return CoreUtils.safeInvoke(this.props.menuRenderer, this.quadrantRefHandlers[QuadrantType.MAIN].menu);
        };
        this.renderTopQuadrantMenu = () => {
            return CoreUtils.safeInvoke(this.props.menuRenderer, this.quadrantRefHandlers[QuadrantType.TOP].menu);
        };
        this.renderLeftQuadrantMenu = () => {
            return CoreUtils.safeInvoke(this.props.menuRenderer, this.quadrantRefHandlers[QuadrantType.LEFT].menu);
        };
        this.renderTopLeftQuadrantMenu = () => {
            return CoreUtils.safeInvoke(this.props.menuRenderer, this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);
        };
        // Column header
        this.renderMainQuadrantColumnHeader = (showFrozenColumnsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;
            const resizeHandler = this.handleColumnResizeGuideMain;
            const reorderingHandler = this.handleColumnsReordering;
            return CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);
        };
        this.renderTopQuadrantColumnHeader = (showFrozenColumnsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;
            const resizeHandler = this.handleColumnResizeGuideTop;
            const reorderingHandler = this.handleColumnsReordering;
            return CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);
        };
        this.renderLeftQuadrantColumnHeader = (showFrozenColumnsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;
            const resizeHandler = this.handleColumnResizeGuideLeft;
            const reorderingHandler = this.handleColumnsReordering;
            return CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);
        };
        this.renderTopLeftQuadrantColumnHeader = (showFrozenColumnsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;
            const resizeHandler = this.handleColumnResizeGuideTopLeft;
            const reorderingHandler = this.handleColumnsReordering;
            return CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);
        };
        // Row header
        this.renderMainQuadrantRowHeader = (showFrozenRowsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;
            const resizeHandler = this.handleRowResizeGuideMain;
            const reorderingHandler = this.handleRowsReordering;
            return CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);
        };
        this.renderTopQuadrantRowHeader = (showFrozenRowsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;
            const resizeHandler = this.handleRowResizeGuideTop;
            const reorderingHandler = this.handleRowsReordering;
            return CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);
        };
        this.renderLeftQuadrantRowHeader = (showFrozenRowsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;
            const resizeHandler = this.handleRowResizeGuideLeft;
            const reorderingHandler = this.handleRowsReordering;
            return CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);
        };
        this.renderTopLeftQuadrantRowHeader = (showFrozenRowsOnly) => {
            const refHandler = this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;
            const resizeHandler = this.handleRowResizeGuideTopLeft;
            const reorderingHandler = this.handleRowsReordering;
            return CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);
        };
        // Event handlers
        // ==============
        // Scrolling
        // ---------
        this.handleMainQuadrantScroll = (event) => {
            if (this.wasMainQuadrantScrollTriggeredByWheelEvent) {
                this.wasMainQuadrantScrollTriggeredByWheelEvent = false;
                return;
            }
            // invoke onScroll - which may read current scroll position - before
            // forcing a reflow with upcoming .scroll{Top,Left} setters.
            CoreUtils.safeInvoke(this.props.onScroll, event);
            // batch DOM reads here. note that onScroll events don't include deltas
            // like onWheel events do, so we have to read from the DOM directly.
            const mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;
            const nextScrollLeft = mainScrollContainer.scrollLeft;
            const nextScrollTop = mainScrollContainer.scrollTop;
            // with the "scroll" event, scroll offsets are updated prior to the
            // event's firing, so no explicit update needed.
            this.handleScrollOffsetChange("scrollLeft", nextScrollLeft);
            this.handleScrollOffsetChange("scrollTop", nextScrollTop);
            // sync less important view stuff when scrolling/wheeling stops.
            this.syncQuadrantViewsDebounced();
        };
        this.handleWheel = (event) => {
            // again, let the listener read the current scroll position before we
            // force a reflow by resizing or repositioning stuff.
            CoreUtils.safeInvoke(this.props.onScroll, event);
            // this helper performs DOM reads, so do them together before the writes below.
            const nextScrollLeft = this.getNextScrollOffset("horizontal", event.deltaX);
            const nextScrollTop = this.getNextScrollOffset("vertical", event.deltaY);
            // update this flag before updating the main quadrant scroll offsets,
            // since we need this set before onScroll fires.
            if (nextScrollLeft != null || nextScrollTop != null) {
                this.wasMainQuadrantScrollTriggeredByWheelEvent = true;
            }
            // manually update the affected quadrant's scroll position to make sure
            // it stays perfectly in sync with dependent quadrants in each frame.
            // note: these DOM writes are batched together after the reads above.
            this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft = nextScrollLeft;
            this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop = nextScrollTop;
            this.handleScrollOffsetChange("scrollLeft", nextScrollLeft);
            this.handleScrollOffsetChange("scrollTop", nextScrollTop);
            // sync less important view stuff when scrolling/wheeling stops.
            this.syncQuadrantViewsDebounced();
        };
        this.getNextScrollOffset = (direction, delta) => {
            const { grid, isHorizontalScrollDisabled, isVerticalScrollDisabled } = this.props;
            const isHorizontal = direction === "horizontal";
            const scrollKey = isHorizontal ? "scrollLeft" : "scrollTop";
            const isScrollDisabled = isHorizontal ? isHorizontalScrollDisabled : isVerticalScrollDisabled;
            if (isScrollDisabled) {
                return undefined;
            }
            // measure client size on the first event of the current wheel gesture,
            // then grab cached values on successive events to eliminate DOM reads.
            // requires clearing the cached values in the debounced view-update at
            // the end of the wheel event.
            // ASSUMPTION: the client size won't change during the wheel event.
            let clientSize = isHorizontal
                ? this.cache.getScrollContainerClientWidth()
                : this.cache.getScrollContainerClientHeight();
            if (clientSize == null) {
                // should trigger only on the first scroll of the wheel gesture.
                // will save client width and height sizes in the cache.
                clientSize = this.updateScrollContainerClientSize(isHorizontal);
            }
            // by now, the client width and height will have been saved in cache, so
            // they can't be nully anymore. also, events can only happen after
            // mount, so we're guaranteed to have measured the header sizes in
            // syncQuadrantViews() by now too, as it's invoked on mount.
            const containerSize = isHorizontal
                ? this.cache.getScrollContainerClientWidth() - this.cache.getRowHeaderWidth()
                : this.cache.getScrollContainerClientHeight() - this.cache.getColumnHeaderHeight();
            const gridSize = isHorizontal ? grid.getWidth() : grid.getHeight();
            const maxScrollOffset = Math.max(0, gridSize - containerSize);
            const currScrollOffset = this.cache.getScrollOffset(scrollKey);
            const nextScrollOffset = CoreUtils.clamp(currScrollOffset + delta, 0, maxScrollOffset);
            return nextScrollOffset;
        };
        // Resizing
        // --------
        // Columns
        this.handleColumnResizeGuideMain = (verticalGuides) => {
            this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);
        };
        this.handleColumnResizeGuideTop = (verticalGuides) => {
            this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);
        };
        this.handleColumnResizeGuideLeft = (verticalGuides) => {
            this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);
        };
        this.handleColumnResizeGuideTopLeft = (verticalGuides) => {
            this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);
        };
        this.invokeColumnResizeHandler = (verticalGuides, quadrantType) => {
            const adjustedGuides = this.adjustVerticalGuides(verticalGuides, quadrantType);
            CoreUtils.safeInvoke(this.props.handleColumnResizeGuide, adjustedGuides);
        };
        // Rows
        this.handleRowResizeGuideMain = (horizontalGuides) => {
            this.invokeRowResizeHandler(horizontalGuides, QuadrantType.MAIN);
        };
        this.handleRowResizeGuideTop = (horizontalGuides) => {
            this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP);
        };
        this.handleRowResizeGuideLeft = (horizontalGuides) => {
            this.invokeRowResizeHandler(horizontalGuides, QuadrantType.LEFT);
        };
        this.handleRowResizeGuideTopLeft = (horizontalGuides) => {
            this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP_LEFT);
        };
        this.invokeRowResizeHandler = (horizontalGuides, quadrantType) => {
            const adjustedGuides = this.adjustHorizontalGuides(horizontalGuides, quadrantType);
            CoreUtils.safeInvoke(this.props.handleRowResizeGuide, adjustedGuides);
        };
        // Reordering
        // ----------
        // Columns
        this.handleColumnsReordering = (oldIndex, newIndex, length) => {
            const guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);
            const leftOffset = this.props.grid.getCumulativeWidthBefore(guideIndex);
            const quadrantType = guideIndex <= this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;
            const verticalGuides = this.adjustVerticalGuides([leftOffset], quadrantType);
            CoreUtils.safeInvoke(this.props.handleColumnsReordering, verticalGuides);
        };
        // Rows
        this.handleRowsReordering = (oldIndex, newIndex, length) => {
            const guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);
            const topOffset = this.props.grid.getCumulativeHeightBefore(guideIndex);
            const quadrantType = guideIndex <= this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;
            const horizontalGuides = this.adjustHorizontalGuides([topOffset], quadrantType);
            CoreUtils.safeInvoke(this.props.handleRowsReordering, horizontalGuides);
        };
        // Size syncing
        // ============
        this.syncQuadrantViewsDebounced = () => {
            const { viewSyncDelay } = this.props;
            if (viewSyncDelay < 0) {
                // update synchronously
                this.syncQuadrantViews();
            }
            else {
                // update asynchronously after a debounced delay
                clearInterval(this.debouncedViewSyncInterval);
                this.debouncedViewSyncInterval = window.setTimeout(this.syncQuadrantViews, viewSyncDelay);
            }
        };
        this.syncQuadrantViews = () => {
            const mainRefs = this.quadrantRefs[QuadrantType.MAIN];
            const mainScrollContainer = mainRefs.scrollContainer;
            //
            // Reads (batched to avoid DOM thrashing)
            //
            const rowHeaderWidth = this.measureDesiredRowHeaderWidth();
            const columnHeaderHeight = this.measureDesiredColumnHeaderHeight();
            const leftQuadrantGridWidth = this.getSecondaryQuadrantGridSize("width");
            const topQuadrantGridHeight = this.getSecondaryQuadrantGridSize("height");
            const leftQuadrantWidth = rowHeaderWidth + leftQuadrantGridWidth;
            const topQuadrantHeight = columnHeaderHeight + topQuadrantGridHeight;
            const rightScrollBarWidth = ScrollUtils.measureScrollBarThickness(mainScrollContainer, "vertical");
            const bottomScrollBarHeight = ScrollUtils.measureScrollBarThickness(mainScrollContainer, "horizontal");
            // ensure neither of these measurements confusingly clamps to zero height.
            const adjustedColumnHeaderHeight = this.maybeIncreaseToDefaultColumnHeaderHeight(columnHeaderHeight);
            const adjustedTopQuadrantHeight = this.maybeIncreaseToDefaultColumnHeaderHeight(topQuadrantHeight);
            // Update cache: let's read now whatever values we might need later.
            // prevents unnecessary reflows in the future.
            this.cache.setRowHeaderWidth(rowHeaderWidth);
            this.cache.setColumnHeaderHeight(columnHeaderHeight);
            // ...however, we also clear the cached client size, so we can read it
            // again when a new scroll begins. not safe to assume this won't change.
            // TODO: maybe use the ResizeSensor?
            this.cache.setScrollContainerClientWidth(undefined);
            this.cache.setScrollContainerClientHeight(undefined);
            //
            // Writes (batched to avoid DOM thrashing)
            //
            // Quadrant-size sync'ing: make the quadrants precisely as big as they
            // need to be to fit their variable-sized headers and/or frozen areas.
            this.maybesSetQuadrantRowHeaderSizes(rowHeaderWidth);
            this.maybeSetQuadrantMenuElementSizes(rowHeaderWidth, adjustedColumnHeaderHeight);
            this.maybeSetQuadrantSizes(leftQuadrantWidth, adjustedTopQuadrantHeight);
            // Scrollbar clearance: tweak the quadrant bottom/right offsets to
            // reveal the MAIN-quadrant scrollbars if they're visible.
            this.maybeSetQuadrantPositionOffset(QuadrantType.TOP, "right", rightScrollBarWidth);
            this.maybeSetQuadrantPositionOffset(QuadrantType.LEFT, "bottom", bottomScrollBarHeight);
            // Scroll syncing: sync the scroll offsets of quadrants that may or may
            // not have been around prior to this update.
            this.maybeSetQuadrantScrollOffset(QuadrantType.LEFT, "scrollTop");
            this.maybeSetQuadrantScrollOffset(QuadrantType.TOP, "scrollLeft");
        };
        this.maybeSetQuadrantSizes = (width, height) => {
            this.maybesSetQuadrantSize(QuadrantType.LEFT, "width", width);
            this.maybesSetQuadrantSize(QuadrantType.TOP, "height", height);
            this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, "width", width);
            this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, "height", height);
        };
        this.maybesSetQuadrantSize = (quadrantType, dimension, value) => {
            const { quadrant } = this.quadrantRefs[quadrantType];
            if (quadrant != null) {
                quadrant.style[dimension] = `${value}px`;
            }
        };
        this.maybeSetQuadrantPositionOffset = (quadrantType, side, value) => {
            const { quadrant } = this.quadrantRefs[quadrantType];
            if (quadrant != null) {
                quadrant.style[side] = `${value}px`;
            }
        };
        this.maybesSetQuadrantRowHeaderSizes = (width) => {
            this.maybeSetQuadrantRowHeaderSize(QuadrantType.MAIN, width);
            this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP, width);
            this.maybeSetQuadrantRowHeaderSize(QuadrantType.LEFT, width);
            this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP_LEFT, width);
        };
        this.maybeSetQuadrantRowHeaderSize = (quadrantType, width) => {
            const { rowHeader } = this.quadrantRefs[quadrantType];
            if (rowHeader != null) {
                rowHeader.style.width = `${width}px`;
            }
        };
        this.maybeSetQuadrantMenuElementSizes = (width, height) => {
            this.maybeSetQuadrantMenuElementSize(QuadrantType.MAIN, width, height);
            this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP, width, height);
            this.maybeSetQuadrantMenuElementSize(QuadrantType.LEFT, width, height);
            this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP_LEFT, width, height);
        };
        this.maybeSetQuadrantMenuElementSize = (quadrantType, width, height) => {
            const { menu } = this.quadrantRefs[quadrantType];
            if (menu != null) {
                menu.style.width = `${width}px`;
                menu.style.height = `${height}px`;
            }
        };
        this.maybeSetQuadrantScrollOffset = (quadrantType, scrollKey, newOffset) => {
            const { scrollContainer } = this.quadrantRefs[quadrantType];
            const scrollOffset = newOffset != null ? newOffset : this.cache.getScrollOffset(scrollKey);
            if (scrollContainer != null) {
                scrollContainer[scrollKey] = scrollOffset;
            }
        };
        this.handleScrollOffsetChange = (scrollKey, offset) => {
            this.cache.setScrollOffset(scrollKey, offset);
            const dependentQuadrantType = scrollKey === "scrollLeft" ? QuadrantType.TOP : QuadrantType.LEFT;
            this.maybeSetQuadrantScrollOffset(dependentQuadrantType, scrollKey);
        };
        // callbacks trigger too frequently unless we throttle scroll and wheel
        // events. declare these functions on the component instance since
        // they're stateful.
        this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(this.handleMainQuadrantScroll);
        this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(this.handleWheel);
        this.cache = new TableQuadrantStackCache();
    }
    /**
     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.
     */
    scrollToPosition(scrollLeft, scrollTop) {
        const { scrollContainer } = this.quadrantRefs[QuadrantType.MAIN];
        this.wasMainQuadrantScrollTriggeredByWheelEvent = false;
        // this will trigger the main quadrant's scroll callback below
        scrollContainer.scrollLeft = scrollLeft;
        scrollContainer.scrollTop = scrollTop;
        this.syncQuadrantViews();
    }
    /**
     * Synchronizes quadrant sizes and scroll offsets based on the current
     * column, row, and header sizes. Useful for correcting quadrant sizes after
     * explicitly resizing columns and rows, for instance.
     *
     * Invoking this method imperatively is cheaper than providing columnWidths
     * or rowHeights array props to TableQuadrantStack and forcing it to run
     * expensive array diffs upon every update.
     */
    synchronizeQuadrantViews() {
        this.syncQuadrantViews();
    }
    componentDidMount() {
        this.emitRefs();
        this.syncQuadrantViews();
    }
    componentDidUpdate(prevProps) {
        // sync'ing quadrant views triggers expensive reflows, so we only call
        // it when layout-affecting props change.
        if (!CoreUtils.shallowCompareKeys(this.props, prevProps, { include: SYNC_TRIGGER_PROP_KEYS })) {
            this.emitRefs();
            this.syncQuadrantViews();
        }
    }
    render() {
        const { grid, enableRowHeader, bodyRenderer, throttleScrolling } = this.props;
        // use the more generic "scroll" event for the main quadrant to capture
        // *both* scrollbar interactions and trackpad/mousewheel gestures.
        const onMainQuadrantScroll = throttleScrolling
            ? this.throttledHandleMainQuadrantScroll
            : this.handleMainQuadrantScroll;
        const onWheel = throttleScrolling ? this.throttledHandleWheel : this.handleWheel;
        const baseProps = {
            bodyRenderer,
            enableRowHeader,
            grid,
            onWheel,
        };
        const shouldRenderLeftQuadrants = this.shouldRenderLeftQuadrants();
        const maybeLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, Object.assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.LEFT].quadrant, quadrantType: QuadrantType.LEFT, columnHeaderCellRenderer: this.renderLeftQuadrantColumnHeader, menuRenderer: this.renderLeftQuadrantMenu, rowHeaderCellRenderer: this.renderLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer }))) : (undefined);
        const maybeTopLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, Object.assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant, quadrantType: QuadrantType.TOP_LEFT, columnHeaderCellRenderer: this.renderTopLeftQuadrantColumnHeader, menuRenderer: this.renderTopLeftQuadrantMenu, rowHeaderCellRenderer: this.renderTopLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer }))) : (undefined);
        return (React.createElement("div", { className: Classes.TABLE_QUADRANT_STACK },
            React.createElement(TableQuadrant, Object.assign({}, baseProps, { bodyRef: this.props.bodyRef, onScroll: onMainQuadrantScroll, quadrantRef: this.quadrantRefHandlers[QuadrantType.MAIN].quadrant, quadrantType: QuadrantType.MAIN, columnHeaderCellRenderer: this.renderMainQuadrantColumnHeader, menuRenderer: this.renderMainQuadrantMenu, rowHeaderCellRenderer: this.renderMainQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer })),
            React.createElement(TableQuadrant, Object.assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP].quadrant, quadrantType: QuadrantType.TOP, columnHeaderCellRenderer: this.renderTopQuadrantColumnHeader, menuRenderer: this.renderTopQuadrantMenu, rowHeaderCellRenderer: this.renderTopQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer })),
            maybeLeftQuadrant,
            maybeTopLeftQuadrant));
    }
    // Ref handlers
    // ============
    generateQuadrantRefHandlers(quadrantType) {
        const reducer = (agg, key) => {
            agg[key] = (ref) => (this.quadrantRefs[quadrantType][key] = ref);
            return agg;
        };
        return ["columnHeader", "menu", "quadrant", "rowHeader", "scrollContainer"].reduce(reducer, {});
    }
    // Emitters
    // ========
    emitRefs() {
        CoreUtils.safeInvoke(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);
        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);
        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);
        CoreUtils.safeInvoke(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);
    }
    // this function is named 'update' instead of 'set', because a 'set'
    // function typically takes the new value as a parameter. we avoid that to
    // keep the isHorizontal logic tree contained within this function.
    updateScrollContainerClientSize(isHorizontal) {
        const mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;
        if (isHorizontal) {
            this.cache.setScrollContainerClientWidth(mainScrollContainer.clientWidth);
            return this.cache.getScrollContainerClientWidth();
        }
        else {
            this.cache.setScrollContainerClientHeight(mainScrollContainer.clientHeight);
            return this.cache.getScrollContainerClientHeight();
        }
    }
    maybeIncreaseToDefaultColumnHeaderHeight(height) {
        return height <= QUADRANT_MIN_SIZE ? DEFAULT_COLUMN_HEADER_HEIGHT : height;
    }
    // Helpers
    // =======
    /**
     * Returns the width or height of *only the grid* in the secondary quadrants
     * (TOP, LEFT, TOP_LEFT), based on the number of frozen rows and columns.
     */
    getSecondaryQuadrantGridSize(dimension) {
        const { grid, numFrozenColumns, numFrozenRows } = this.props;
        const numFrozen = dimension === "width" ? numFrozenColumns : numFrozenRows;
        const getterFn = dimension === "width" ? grid.getCumulativeWidthAt : grid.getCumulativeHeightAt;
        // both getter functions do O(1) lookups.
        return numFrozen > 0 ? getterFn(numFrozen - 1) : QUADRANT_MIN_SIZE;
    }
    /**
     * Measures the desired width of the row header based on its tallest
     * contents.
     */
    measureDesiredRowHeaderWidth() {
        // the MAIN row header serves as the source of truth
        const mainRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;
        if (mainRowHeader == null) {
            return 0;
        }
        else {
            // (alas, we must force a reflow to measure the row header's "desired" width)
            mainRowHeader.style.width = "auto";
            const desiredRowHeaderWidth = mainRowHeader.clientWidth;
            return desiredRowHeaderWidth;
        }
    }
    /**
     * Measures the desired height of the column header based on its tallest
     * contents.
     */
    measureDesiredColumnHeaderHeight() {
        // unlike the row headers, the column headers are in a display-flex
        // layout and are not actually bound by any fixed `height` that we set,
        // so they'll grow freely to their necessary size. makes measuring easy!
        const mainColumnHeader = this.quadrantRefs[QuadrantType.MAIN].columnHeader;
        return mainColumnHeader == null ? 0 : mainColumnHeader.clientHeight;
    }
    shouldRenderLeftQuadrants(props = this.props) {
        const { enableRowHeader, numFrozenColumns } = props;
        return enableRowHeader || (numFrozenColumns != null && numFrozenColumns > 0);
    }
    // Resizing
    adjustVerticalGuides(verticalGuides, quadrantType) {
        const isFrozenQuadrant = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;
        const scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset("scrollLeft");
        const rowHeaderWidth = this.cache.getRowHeaderWidth();
        const adjustedVerticalGuides = verticalGuides != null
            ? verticalGuides.map(verticalGuide => verticalGuide - scrollAmount + rowHeaderWidth)
            : verticalGuides;
        return adjustedVerticalGuides;
    }
    adjustHorizontalGuides(horizontalGuides, quadrantType) {
        const isFrozenQuadrant = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;
        const scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset("scrollTop");
        const columnHeaderHeight = this.cache.getColumnHeaderHeight();
        const adjustedHorizontalGuides = horizontalGuides != null
            ? horizontalGuides.map(horizontalGuide => horizontalGuide - scrollAmount + columnHeaderHeight)
            : horizontalGuides;
        return adjustedHorizontalGuides;
    }
};
// we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid
// declaring that and other required props here.
TableQuadrantStack.defaultProps = {
    enableColumnInteractionBar: undefined,
    enableRowHeader: true,
    isHorizontalScrollDisabled: false,
    isVerticalScrollDisabled: false,
    throttleScrolling: true,
    viewSyncDelay: DEFAULT_VIEW_SYNC_DELAY,
};
TableQuadrantStack = tslib_1.__decorate([
    polyfill
], TableQuadrantStack);
export { TableQuadrantStack };
//# sourceMappingURL=tableQuadrantStack.js.map