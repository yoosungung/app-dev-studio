/*
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Utils as CoreUtils } from "@blueprintjs/core";
import * as React from "react";
import * as FocusedCellUtils from "../common/internal/focusedCellUtils";
import * as PlatformUtils from "../common/internal/platformUtils";
import { Utils } from "../common/utils";
import { Regions } from "../regions";
import { DragEvents } from "./dragEvents";
import { Draggable } from "./draggable";
export class DragSelectable extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.didExpandSelectionOnActivate = false;
        this.handleActivate = (event) => {
            const { locateClick, selectedRegions, selectedRegionTransform } = this.props;
            if (this.shouldIgnoreMouseDown(event)) {
                return false;
            }
            let region = locateClick(event);
            if (!Regions.isValid(region)) {
                return false;
            }
            if (selectedRegionTransform != null) {
                region = selectedRegionTransform(region, event);
            }
            const foundIndex = Regions.findMatchingRegion(selectedRegions, region);
            const matchesExistingSelection = foundIndex !== -1;
            if (matchesExistingSelection && DragEvents.isAdditive(event)) {
                this.handleClearSelectionAtIndex(foundIndex);
                // if we just deselected a selected region, a subsequent drag-move
                // could reselect it again and *also* clear other selections. that's
                // quite unintuitive, so ignore subsequent drag-move's.
                return false;
            }
            // we want to listen to subsequent drag-move's in all following cases,
            // so this mousedown can be the start of a new selection if desired.
            if (matchesExistingSelection) {
                this.handleClearAllSelectionsNotAtIndex(foundIndex);
            }
            else if (this.shouldExpandSelection(event)) {
                this.handleExpandSelection(region);
            }
            else if (this.shouldAddDisjointSelection(event)) {
                this.handleAddDisjointSelection(region);
            }
            else {
                this.handleReplaceSelection(region);
            }
            return true;
        };
        this.handleDragMove = (event, coords) => {
            const { enableMultipleSelection, focusedCell, locateClick, locateDrag, selectedRegions, selectedRegionTransform, } = this.props;
            let region = enableMultipleSelection
                ? locateDrag(event, coords, /* returnEndOnly? */ this.didExpandSelectionOnActivate)
                : locateClick(event);
            if (!Regions.isValid(region)) {
                return;
            }
            else if (selectedRegionTransform != null) {
                region = selectedRegionTransform(region, event, coords);
            }
            const nextSelectedRegions = this.didExpandSelectionOnActivate
                ? this.expandSelectedRegions(selectedRegions, region, focusedCell)
                : Regions.update(selectedRegions, region);
            this.maybeInvokeSelectionCallback(nextSelectedRegions);
            if (!enableMultipleSelection) {
                // move the focused cell with the selected region
                const lastIndex = nextSelectedRegions.length - 1;
                const mostRecentRegion = nextSelectedRegions[lastIndex];
                this.invokeOnFocusCallbackForRegion(mostRecentRegion, lastIndex);
            }
        };
        this.handleDragEnd = () => {
            this.finishInteraction();
        };
        this.handleClick = () => {
            this.finishInteraction();
        };
        // Boolean checks
        // ==============
        this.shouldExpandSelection = (event) => {
            const { enableMultipleSelection } = this.props;
            return enableMultipleSelection && event.shiftKey;
        };
        this.shouldAddDisjointSelection = (event) => {
            const { enableMultipleSelection } = this.props;
            return enableMultipleSelection && DragEvents.isAdditive(event);
        };
        // Update logic
        // ============
        this.handleClearSelectionAtIndex = (selectedRegionIndex) => {
            const { selectedRegions } = this.props;
            // remove just the clicked region, leaving other selected regions in place
            const nextSelectedRegions = selectedRegions.slice();
            nextSelectedRegions.splice(selectedRegionIndex, 1);
            this.maybeInvokeSelectionCallback(nextSelectedRegions);
            // if there are still any selections, move the focused cell to the
            // most recent selection. otherwise, don't update it.
            if (nextSelectedRegions.length > 0) {
                const lastIndex = nextSelectedRegions.length - 1;
                this.invokeOnFocusCallbackForRegion(nextSelectedRegions[lastIndex], lastIndex);
            }
        };
        this.handleClearAllSelectionsNotAtIndex = (selectedRegionIndex) => {
            const { selectedRegions } = this.props;
            const nextSelectedRegion = selectedRegions[selectedRegionIndex];
            this.maybeInvokeSelectionCallback([nextSelectedRegion]);
            this.invokeOnFocusCallbackForRegion(nextSelectedRegion, 0);
        };
        this.handleExpandSelection = (region) => {
            const { focusedCell, selectedRegions } = this.props;
            this.didExpandSelectionOnActivate = true;
            // there should be only one selected region after expanding. do not
            // update the focused cell.
            const nextSelectedRegions = this.expandSelectedRegions(selectedRegions, region, focusedCell);
            this.maybeInvokeSelectionCallback(nextSelectedRegions);
            // move the focused cell into the new region if there were no selections before
            if (selectedRegions == null || selectedRegions.length === 0) {
                this.invokeOnFocusCallbackForRegion(region);
            }
        };
        this.handleAddDisjointSelection = (region) => {
            const { selectedRegions } = this.props;
            // add the new region to the existing selections
            const nextSelectedRegions = Regions.add(selectedRegions, region);
            this.maybeInvokeSelectionCallback(nextSelectedRegions);
            // put the focused cell in the new region
            this.invokeOnFocusCallbackForRegion(region, nextSelectedRegions.length - 1);
        };
        this.handleReplaceSelection = (region) => {
            // clear all selections and retain only the new one
            const nextSelectedRegions = [region];
            this.maybeInvokeSelectionCallback(nextSelectedRegions);
            // move the focused cell into the new selection
            this.invokeOnFocusCallbackForRegion(region);
        };
        this.invokeOnFocusCallbackForRegion = (focusRegion, focusSelectionIndex = 0) => {
            const { onFocusedCell } = this.props;
            const focusedCellCoords = Regions.getFocusCellCoordinatesFromRegion(focusRegion);
            onFocusedCell(FocusedCellUtils.toFullCoordinates(focusedCellCoords, focusSelectionIndex));
        };
        // Other
        // =====
        this.finishInteraction = () => {
            CoreUtils.safeInvoke(this.props.onSelectionEnd, this.props.selectedRegions);
            this.didExpandSelectionOnActivate = false;
            this.lastEmittedSelectedRegions = null;
        };
    }
    render() {
        const draggableProps = this.getDraggableProps();
        return (React.createElement(Draggable, Object.assign({}, draggableProps, { preventDefault: false }), this.props.children));
    }
    getDraggableProps() {
        return this.props.onSelection == null
            ? {}
            : {
                onActivate: this.handleActivate,
                onClick: this.handleClick,
                onDragEnd: this.handleDragEnd,
                onDragMove: this.handleDragMove,
            };
    }
    shouldIgnoreMouseDown(event) {
        const { disabled, ignoredSelectors = [] } = this.props;
        const element = event.target;
        const isLeftClick = Utils.isLeftClick(event);
        const isContextMenuTrigger = isLeftClick && event.ctrlKey && PlatformUtils.isMac();
        const isDisabled = CoreUtils.safeInvokeOrValue(disabled, event);
        return (!isLeftClick ||
            isContextMenuTrigger ||
            isDisabled ||
            ignoredSelectors.some((selector) => element.closest(selector) != null));
    }
    // Callbacks
    // =========
    maybeInvokeSelectionCallback(nextSelectedRegions) {
        const { onSelection } = this.props;
        // invoke only if the selection changed. this is useful only on
        // mousemove; there's special handling for mousedown interactions that
        // target an already-selected region.
        if (this.lastEmittedSelectedRegions == null ||
            !CoreUtils.deepCompareKeys(this.lastEmittedSelectedRegions, nextSelectedRegions)) {
            onSelection(nextSelectedRegions);
            this.lastEmittedSelectedRegions = nextSelectedRegions;
        }
    }
    /**
     * Expands the last-selected region to the new region, and replaces the
     * last-selected region with the expanded region. If a focused cell is provided,
     * the focused cell will serve as an anchor for the expansion.
     */
    expandSelectedRegions(regions, region, focusedCell) {
        if (regions.length === 0) {
            return [region];
        }
        else if (focusedCell != null) {
            const expandedRegion = FocusedCellUtils.expandFocusedRegion(focusedCell, region);
            return Regions.update(regions, expandedRegion);
        }
        else {
            const expandedRegion = Regions.expandRegion(regions[regions.length - 1], region);
            return Regions.update(regions, expandedRegion);
        }
    }
}
DragSelectable.defaultProps = {
    disabled: false,
    enableMultipleSelection: false,
    selectedRegions: [],
};
//# sourceMappingURL=selectable.js.map